generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

enum Role {
  USER
  ADMIN
}

enum Category {
  FLOWER
  HASH
}

model User {
  id           String     @id @default(cuid()) // Reverted to CUID
  name         String?
  email        String     @unique
  passwordHash String? // for credentials
  role         Role       @default(USER)
  votes        Vote[]
  comments     Comment[]
  createdAt    DateTime   @default(now())
  updatedAt    DateTime   @updatedAt
  Producer     Producer[]
}

model Producer {
  id          String   @id @default(cuid())
  name        String
  category    Category
  logoUrl     String?
  createdAt   DateTime @default(now())
  createdBy   User?    @relation(fields: [createdById], references: [id])
  createdById String?
  votes       Vote[]
  comments    Comment[]

  @@unique([name, category])
}

model Vote {
  id         String   @id @default(cuid())
  user       User     @relation(fields: [userId], references: [id])
  userId     String
  producer   Producer @relation(fields: [producerId], references: [id], onDelete: Cascade) // Added onDelete: Cascade
  producerId String
  value      Int // rating 1-5
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt // Added missing updatedAt

  @@unique([userId, producerId])
}

model Comment {
  id         String   @id @default(cuid())
  text       String
  imageUrls  String[]
  user       User     @relation(fields: [userId], references: [id])
  userId     String
  producer   Producer @relation(fields: [producerId], references: [id], onDelete: Cascade)
  producerId String
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  @@unique([userId, producerId])
}
