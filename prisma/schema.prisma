generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

enum Role {
  USER
  ADMIN
  PRODUCER_ADMIN
}

enum Category {
  FLOWER
  HASH
}

model User {
  id                      String                   @id @default(cuid()) // Reverted to CUID
  name                    String?
  username                String?                  @unique
  birthday                DateTime?
  profilePicUrl           String?
  socialLink              String?
  email                   String                   @unique
  passwordHash            String? // for credentials
  role                    Role                     @default(USER)
  votes                   Vote[]
  comments                Comment[]
  producerAdmins          ProducerAdmin[]
  notifications           Notification[]
  notificationPreferences NotificationPreference[]
  createdAt               DateTime                 @default(now())
  updatedAt               DateTime                 @updatedAt
  Producer                Producer[]
}

model Producer {
  id                     String                   @id @default(cuid())
  name                   String
  category               Category
  logoUrl                String?
  profileImage           String?
  website                String?
  ingredients            String?
  attributes             String[]                 @default([])
  slug                   String?                  @unique
  createdAt              DateTime                 @default(now())
  createdBy              User?                    @relation(fields: [createdById], references: [id])
  createdById            String?
  votes                  Vote[]
  comments               Comment[]
  ProducerRatingSnapshot ProducerRatingSnapshot[]
  admins                 ProducerAdmin[]
  strains                Strain[]

  @@unique([name, category])
}

model Vote {
  id         String   @id @default(cuid())
  user       User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId     String
  producer   Producer @relation(fields: [producerId], references: [id], onDelete: Cascade) // Added onDelete: Cascade
  producerId String
  value      Int // rating 1-5
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt // Added missing updatedAt

  @@unique([userId, producerId])
}

model Comment {
  id         String   @id @default(cuid())
  text       String
  imageUrls  String[]
  user       User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId     String
  producer   Producer @relation(fields: [producerId], references: [id], onDelete: Cascade)
  producerId String
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  @@unique([userId, producerId])
}

model ProducerRatingSnapshot {
  id            String   @id @default(cuid())
  producer      Producer @relation(fields: [producerId], references: [id], onDelete: Cascade)
  producerId    String
  averageRating Float
  categoryRank  Int
  createdAt     DateTime @default(now())

  @@index([producerId, createdAt])
}

model ProducerAdmin {
  user       User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId     String
  producer   Producer @relation(fields: [producerId], references: [id], onDelete: Cascade)
  producerId String

  @@id([userId, producerId])
}

model Strain {
  id          String   @id @default(cuid())
  name        String
  description String?
  releaseDate DateTime?
  imageUrl    String?
  producer    Producer @relation(fields: [producerId], references: [id], onDelete: Cascade)
  producerId  String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@unique([producerId, name])
}

model Notification {
  id        String            @id @default(cuid())
  user      User              @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    String
  message   String
  readAt    DateTime?
  createdAt DateTime          @default(now())
  jobs      NotificationJob[]
}

model NotificationJob {
  id             String       @id @default(cuid())
  notification   Notification @relation(fields: [notificationId], references: [id], onDelete: Cascade)
  notificationId String
  scheduledAt    DateTime
  sentAt         DateTime?
  createdAt      DateTime     @default(now())
}

model NotificationPreference {
  id     String  @id @default(cuid())
  user   User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId String
  email  Boolean @default(true)
  sms    Boolean @default(false)
  push   Boolean @default(false)
}
