generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

enum Role {
  USER
  ADMIN
  PRODUCER_ADMIN
  STATE_ADMIN
}

enum Category {
  FLOWER
  HASH
}

enum Market {
  WHITE
  BLACK
  BOTH
}

model State {
  id    String @id @default(cuid())
  code  String @unique
  name  String
  slug  String @unique

  producers              Producer[]
  strains                Strain[]
  votes                  Vote[]
  producerRatingSnapshots ProducerRatingSnapshot[]
  stateAdmins            StateAdmin[]
}

model User {
  id                String          @id @default(cuid()) // Reverted to CUID
  name              String?
  username          String?         @unique
  birthday          DateTime?
  profilePicUrl     String?
  socialLink        String?
  email             String          @unique
  passwordHash      String? // for credentials
  role              Role            @default(USER)
  notificationOptIn Boolean         @default(false)
  votes             Vote[]
  comments          Comment[]
  producerAdmins    ProducerAdmin[]
  stateAdmins       StateAdmin[]
  createdAt         DateTime        @default(now())
  updatedAt         DateTime        @updatedAt
  Producer          Producer[]
  StrainReview      StrainReview[]
}

model Producer {
  id                     String                   @id @default(cuid())
  name                   String
  category               Category
  market                 Market                   @default(BOTH)
  state                  State                    @relation(fields: [stateId], references: [id])
  stateId                String
  logoUrl                String?
  profileImage           String?
  website                String?
  ingredients            String?
  attributes             String[]                 @default([])
  slug                   String?
  createdAt              DateTime                 @default(now())
  createdBy              User?                    @relation(fields: [createdById], references: [id])
  createdById            String?
  votes                  Vote[]
  comments               Comment[]
  ProducerRatingSnapshot ProducerRatingSnapshot[]
  admins                 ProducerAdmin[]
  strains                Strain[]
  StrainReview           StrainReview[]

  @@unique([stateId, name, category])
  @@unique([stateId, slug])
  @@index([stateId])
}

model Vote {
  id         String   @id @default(cuid())
  user       User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId     String
  producer   Producer @relation(fields: [producerId], references: [id], onDelete: Cascade) // Added onDelete: Cascade
  producerId String
  state      State    @relation(fields: [stateId], references: [id])
  stateId    String
  value      Int // rating 1-5
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt // Added missing updatedAt

  @@unique([userId, producerId])
  @@index([stateId])
}

model Comment {
  id         String   @id @default(cuid())
  text       String
  imageUrls  String[]
  user       User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId     String
  producer   Producer @relation(fields: [producerId], references: [id], onDelete: Cascade)
  producerId String
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  @@unique([userId, producerId])
}

model ProducerRatingSnapshot {
  id            String   @id @default(cuid())
  producer      Producer @relation(fields: [producerId], references: [id], onDelete: Cascade)
  producerId    String
  state         State    @relation(fields: [stateId], references: [id])
  stateId       String
  averageRating Float
  categoryRank  Int
  createdAt     DateTime @default(now())

  @@index([producerId, createdAt])
  @@index([stateId, createdAt])
}

model ProducerAdmin {
  user       User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId     String
  producer   Producer @relation(fields: [producerId], references: [id], onDelete: Cascade)
  producerId String

  @@id([userId, producerId])
}

model StateAdmin {
  user    User  @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId  String
  state   State @relation(fields: [stateId], references: [id], onDelete: Cascade)
  stateId String

  @@id([userId, stateId])
}

model Strain {
  id           String         @id @default(cuid())
  strainSlug   String         @unique @default(cuid())
  name         String
  description  String?
  releaseDate  DateTime?
  imageUrl     String?
  producer     Producer       @relation(fields: [producerId], references: [id], onDelete: Cascade)
  producerId   String
  state        State          @relation(fields: [stateId], references: [id])
  stateId      String
  createdAt    DateTime       @default(now())
  updatedAt    DateTime       @updatedAt
  StrainReview StrainReview[]

  @@unique([producerId, name])
  @@index([stateId])
}

model StrainReview {
  id              String   @id @default(cuid())
  comment         String?
  flavor          Int
  effect          Int
  smoke           Int
  aggregateRating Float    @default(0)
  imageUrl        String?
  user            User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId          String
  producer        Producer @relation(fields: [producerId], references: [id], onDelete: Cascade)
  producerId      String
  strain          Strain   @relation(fields: [strainId], references: [id], onDelete: Cascade)
  strainId        String
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt

  @@unique([userId, strainId])
}
